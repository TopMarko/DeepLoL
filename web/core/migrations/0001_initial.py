# Generated by Django 3.0.5 on 2020-05-03 02:54

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MatchReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gameId', models.BigIntegerField()),
                ('queue', models.PositiveIntegerField()),
                ('gameType', models.CharField(max_length=20)),
                ('gameDuration', models.BigIntegerField()),
                ('region', models.CharField(max_length=4)),
                ('gameCreation', models.BigIntegerField()),
                ('season', models.PositiveIntegerField()),
                ('gameVersion', models.CharField(max_length=20)),
                ('mapId', models.PositiveIntegerField()),
                ('gameMode', models.CharField(max_length=12)),
            ],
        ),
        migrations.CreateModel(
            name='ParticipantStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teamId', models.IntegerField()),
                ('spell1Id', models.IntegerField()),
                ('spell2Id', models.IntegerField()),
                ('item0', models.IntegerField()),
                ('item1', models.IntegerField()),
                ('item2', models.IntegerField()),
                ('item3', models.IntegerField()),
                ('item4', models.IntegerField()),
                ('item5', models.IntegerField()),
                ('item6', models.IntegerField()),
                ('totalUnitsHealed', models.IntegerField()),
                ('largestMultiKill', models.IntegerField()),
                ('goldEarned', models.IntegerField()),
                ('firstInhibitorKill', models.BooleanField(null=True)),
                ('physicalDamageTaken', models.BigIntegerField()),
                ('nodeNeutralizeAssist', models.IntegerField(null=True)),
                ('totalPlayerScore', models.IntegerField()),
                ('champLevel', models.IntegerField()),
                ('damageDealtToObjectives', models.BigIntegerField()),
                ('totalDamageTaken', models.BigIntegerField()),
                ('neutralMinionsKilled', models.IntegerField()),
                ('deaths', models.IntegerField()),
                ('tripleKills', models.IntegerField()),
                ('magicDamageDealtToChampions', models.BigIntegerField()),
                ('wardsKilled', models.IntegerField()),
                ('pentaKills', models.IntegerField()),
                ('damageSelfMitigated', models.BigIntegerField()),
                ('largestCriticalStrike', models.IntegerField()),
                ('nodeNeutralize', models.IntegerField(null=True)),
                ('totalTimeCrowdControlDealt', models.IntegerField()),
                ('firstTowerKill', models.BooleanField()),
                ('magicDamageDealt', models.BigIntegerField()),
                ('totalScoreRank', models.IntegerField()),
                ('nodeCapture', models.IntegerField(null=True)),
                ('wardsPlaced', models.IntegerField()),
                ('totalDamageDealt', models.BigIntegerField()),
                ('timeCCingOthers', models.BigIntegerField()),
                ('magicalDamageTaken', models.BigIntegerField()),
                ('largestKillingSpree', models.IntegerField()),
                ('totalDamageDealtToChampions', models.BigIntegerField()),
                ('physicalDamageDealtToChampions', models.BigIntegerField()),
                ('neutralMinionsKilledTeamJungle', models.IntegerField()),
                ('totalMinionsKilled', models.IntegerField()),
                ('firstInhibitorAssist', models.BooleanField(null=True)),
                ('firstTowerAssist', models.BooleanField()),
                ('visionWardsBoughtInGame', models.IntegerField()),
                ('objectivePlayerScore', models.IntegerField()),
                ('kills', models.IntegerField()),
                ('combatPlayerScore', models.IntegerField()),
                ('inhibitorKills', models.IntegerField()),
                ('turretKills', models.IntegerField()),
                ('participantId', models.IntegerField()),
                ('trueDamageTaken', models.BigIntegerField()),
                ('firstBloodAssist', models.BooleanField()),
                ('nodeCaptureAssist', models.IntegerField(null=True)),
                ('assists', models.IntegerField()),
                ('teamObjective', models.IntegerField(null=True)),
                ('altarsNeutralized', models.IntegerField(null=True)),
                ('goldSpent', models.IntegerField()),
                ('damageDealtToTurrets', models.BigIntegerField()),
                ('altarsCaptured', models.IntegerField(null=True)),
                ('win', models.BooleanField()),
                ('totalHeal', models.BigIntegerField()),
                ('unrealKills', models.IntegerField()),
                ('visionScore', models.BigIntegerField()),
                ('physicalDamageDealt', models.BigIntegerField()),
                ('firstBloodKill', models.BooleanField()),
                ('longestTimeSpentLiving', models.IntegerField()),
                ('killingSprees', models.IntegerField()),
                ('sightWardsBoughtInGame', models.IntegerField()),
                ('trueDamageDealtToChampions', models.BigIntegerField()),
                ('neutralMinionsKilledEnemyJungle', models.IntegerField()),
                ('doubleKills', models.IntegerField()),
                ('trueDamageDealt', models.BigIntegerField()),
                ('quadraKills', models.IntegerField()),
                ('playerScore0', models.IntegerField()),
                ('playerScore1', models.IntegerField()),
                ('playerScore2', models.IntegerField()),
                ('playerScore3', models.IntegerField()),
                ('playerScore4', models.IntegerField()),
                ('playerScore5', models.IntegerField()),
                ('playerScore6', models.IntegerField()),
                ('playerScore7', models.IntegerField()),
                ('playerScore8', models.IntegerField()),
                ('playerScore9', models.IntegerField()),
                ('perk0', models.IntegerField()),
                ('perk0Var1', models.IntegerField()),
                ('perk0Var2', models.IntegerField()),
                ('perk0Var3', models.IntegerField()),
                ('perk1', models.IntegerField()),
                ('perk1Var1', models.IntegerField()),
                ('perk1Var2', models.IntegerField()),
                ('perk1Var3', models.IntegerField()),
                ('perk2', models.IntegerField()),
                ('perk2Var1', models.IntegerField()),
                ('perk2Var2', models.IntegerField()),
                ('perk2Var3', models.IntegerField()),
                ('perk3', models.IntegerField()),
                ('perk3Var1', models.IntegerField()),
                ('perk3Var2', models.IntegerField()),
                ('perk3Var3', models.IntegerField()),
                ('perk4', models.IntegerField()),
                ('perk4Var1', models.IntegerField()),
                ('perk4Var2', models.IntegerField()),
                ('perk4Var3', models.IntegerField()),
                ('perk5', models.IntegerField()),
                ('perk5Var1', models.IntegerField()),
                ('perk5Var2', models.IntegerField()),
                ('perk5Var3', models.IntegerField()),
                ('perkPrimaryStyle', models.IntegerField()),
                ('perkSubStyle', models.IntegerField()),
                ('csDiffPerMin0To10', models.FloatField(null=True)),
                ('csDiffPerMin10To20', models.FloatField(null=True)),
                ('csDiffPerMin20To30', models.FloatField(null=True)),
                ('csDiffPerMin30ToEnd', models.FloatField(null=True)),
                ('damageTakenPerMin0To10', models.FloatField(null=True)),
                ('damageTakenPerMin10To20', models.FloatField(null=True)),
                ('damageTakenPerMin20To30', models.FloatField(null=True)),
                ('damageTakenPerMin30ToEnd', models.FloatField(null=True)),
                ('damageTakenDiffPerMin0To10', models.FloatField(null=True)),
                ('damageTakenDiffPerMin10To20', models.FloatField(null=True)),
                ('damageTakenDiffPerMin20To30', models.FloatField(null=True)),
                ('damageTakenDiffPerMin30ToEnd', models.FloatField(null=True)),
                ('xpPerMin0To10', models.FloatField(null=True)),
                ('xpPerMin10To20', models.FloatField(null=True)),
                ('xpPerMin20To30', models.FloatField(null=True)),
                ('xpPerMin30ToEnd', models.FloatField(null=True)),
                ('xpDiffPerMin0To10', models.FloatField(null=True)),
                ('xpDiffPerMin10To20', models.FloatField(null=True)),
                ('xpDiffPerMin20To30', models.FloatField(null=True)),
                ('xpDiffPerMin30ToEnd', models.FloatField(null=True)),
                ('creepsPerMin0To10', models.FloatField(null=True)),
                ('creepsPerMin10To20', models.FloatField(null=True)),
                ('creepsPerMin20To30', models.FloatField(null=True)),
                ('creepsPerMin30ToEnd', models.FloatField(null=True)),
                ('goldPerMin0To10', models.FloatField(null=True)),
                ('goldPerMin10To20', models.FloatField(null=True)),
                ('goldPerMin20To30', models.FloatField(null=True)),
                ('goldPerMin30ToEnd', models.FloatField(null=True)),
                ('gameId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='core.MatchReference')),
            ],
        ),
        migrations.CreateModel(
            name='TeamStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=4)),
                ('towerKills', models.IntegerField()),
                ('riftHeraldKills', models.IntegerField()),
                ('inhibitorKills', models.IntegerField()),
                ('dominionVictoryScore', models.IntegerField()),
                ('dragonKills', models.IntegerField()),
                ('baronKills', models.IntegerField()),
                ('vilemawKills', models.IntegerField()),
                ('teamId', models.IntegerField()),
                ('firstBlood', models.BooleanField()),
                ('firstBaron', models.BooleanField()),
                ('firstDragon', models.BooleanField()),
                ('firstInhibitor', models.BooleanField()),
                ('firstTower', models.BooleanField()),
                ('firstRiftHerald', models.BooleanField()),
                ('win', models.BooleanField()),
                ('ban0Turn', models.IntegerField()),
                ('ban0Champion', models.IntegerField()),
                ('ban1Turn', models.IntegerField()),
                ('ban1Champion', models.IntegerField()),
                ('ban2Turn', models.IntegerField()),
                ('ban2Champion', models.IntegerField()),
                ('ban3Turn', models.IntegerField()),
                ('ban3Champion', models.IntegerField()),
                ('ban4Turn', models.IntegerField()),
                ('ban4Champion', models.IntegerField()),
                ('gameReference', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.MatchReference')),
            ],
            options={
                'unique_together': {('region', 'gameReference', 'teamId')},
            },
        ),
        migrations.CreateModel(
            name='Summoner',
            fields=[
                ('region', models.CharField(max_length=4)),
                ('accountId', models.CharField(max_length=56)),
                ('profileIconId', models.IntegerField()),
                ('revisionDate', models.BigIntegerField()),
                ('name', models.CharField(max_length=16)),
                ('summonerId', models.CharField(max_length=63)),
                ('puuid', models.CharField(max_length=78, primary_key=True, serialize=False)),
                ('summonerLevel', models.BigIntegerField()),
                ('soloTier', models.CharField(blank=True, choices=[('IRON', 'IRON'), ('BRONZE', 'BRONZE'), ('GOLD', 'GOLD'), ('PLATINUM', 'PLATINUM'), ('DIAMOND', 'DIAMOND'), ('MASTER', 'MASTER'), ('GRANDMASTER', 'GRANDMASTER'), ('CHALLENGER', 'CHALLENGER')], default=None, max_length=12, null=True)),
                ('soloRank', models.IntegerField(blank=True, choices=[(4, 'Iv'), (3, 'Iii'), (2, 'Ii'), (1, 'I')], default=None, null=True)),
                ('soloLP', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('soloWins', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('soloLosses', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('soloVeteran', models.BooleanField(default=False)),
                ('soloInactive', models.BooleanField(default=False)),
                ('soloFreshBlood', models.BooleanField(default=False)),
                ('soloHotStreak', models.BooleanField(default=False)),
                ('soloLeagueId', models.CharField(blank=True, default='', max_length=255)),
                ('soloMiniSeriesTarget', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MaxValueValidator(5)])),
                ('soloMiniSeriesWins', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MaxValueValidator(3)])),
                ('soloMiniSeriesLosses', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MaxValueValidator(3)])),
                ('soloMiniSeriesProgress', models.CharField(blank=True, default='', max_length=5)),
                ('flexTier', models.CharField(blank=True, choices=[('IRON', 'IRON'), ('BRONZE', 'BRONZE'), ('GOLD', 'GOLD'), ('PLATINUM', 'PLATINUM'), ('DIAMOND', 'DIAMOND'), ('MASTER', 'MASTER'), ('GRANDMASTER', 'GRANDMASTER'), ('CHALLENGER', 'CHALLENGER')], default=None, max_length=12, null=True)),
                ('flexRank', models.IntegerField(blank=True, choices=[(4, 'Iv'), (3, 'Iii'), (2, 'Ii'), (1, 'I')], default=None, null=True)),
                ('flexLP', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('flexWins', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('flexLosses', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('flexVeteran', models.BooleanField(default=False)),
                ('flexInactive', models.BooleanField(default=False)),
                ('flexFreshBlood', models.BooleanField(default=False)),
                ('flexHotStreak', models.BooleanField(default=False)),
                ('flexLeagueId', models.CharField(blank=True, default='', max_length=255)),
                ('flexMiniSeriesTarget', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MaxValueValidator(5)])),
                ('flexMiniSeriesWins', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MaxValueValidator(3)])),
                ('flexMiniSeriesLosses', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MaxValueValidator(3)])),
                ('flexMiniSeriesProgress', models.CharField(blank=True, default='', max_length=5)),
                ('individualPerformances', models.ManyToManyField(to='core.ParticipantStats')),
                ('matches', models.ManyToManyField(to='core.MatchReference')),
                ('teamPerformances', models.ManyToManyField(to='core.TeamStats')),
            ],
            options={
                'unique_together': {('region', 'accountId'), ('region', 'name'), ('region', 'summonerId')},
            },
        ),
        migrations.AddField(
            model_name='participantstats',
            name='summonerId',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Summoner'),
        ),
        migrations.AddField(
            model_name='matchreference',
            name='participantStats',
            field=models.ManyToManyField(to='core.ParticipantStats'),
        ),
        migrations.AddField(
            model_name='matchreference',
            name='teamStats',
            field=models.ManyToManyField(to='core.TeamStats'),
        ),
        migrations.CreateModel(
            name='FailedMatchGet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gameId', models.BigIntegerField()),
                ('region', models.CharField(max_length=4)),
            ],
            options={
                'unique_together': {('gameId', 'region')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='participantstats',
            unique_together={('summonerId', 'gameId')},
        ),
        migrations.AlterUniqueTogether(
            name='matchreference',
            unique_together={('region', 'gameId')},
        ),
    ]
